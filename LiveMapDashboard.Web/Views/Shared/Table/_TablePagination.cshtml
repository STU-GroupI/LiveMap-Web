@functions {
    void RenderPageButton(int page, bool isActive)
    {
        <button type="button" class="paginationClick min-h-9.5 min-w-9.5 flex justify-center items-center @(isActive ? "bg-gray-200 text-gray-800 focus:bg-gray-300 dark:bg-neutral-600 dark:text-white dark:focus:bg-neutral-500" : "text-gray-800 hover:bg-gray-100 focus:bg-gray-100 dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10") py-2 px-3 text-sm rounded-lg focus:outline-hidden disabled:opacity-50 disabled:pointer-events-none">
            @(page)
        </button>;
    }
}

<div class="py-1 px-4">
    <nav class="flex items-center gap-x-1" aria-label="Pagination">
        <button type="button" id="toPreviousPage" class="min-h-9.5 min-w-9.5 py-2 px-2.5 inline-flex jusify-center items-center gap-x-2 text-sm rounded-lg text-gray-800 hover:bg-gray-100 focus:outline-hidden focus:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10" aria-label="Previous">
            <svg class="shrink-0 size-3.5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="m15 18-6-6 6-6"></path>
            </svg>
            <span class="sr-only">Previous</span>
        </button>

        <div class="flex items-center gap-x-1">
            @if (Model.Result.TotalPages <= 5)
            {
                for (int i = 1; i <= Model.Result.TotalPages; i++)
                {
                    RenderPageButton(i, i == Model.Result.CurrentPage);
                }
            }
            else
            {
                int totalPages = Model.Result.TotalPages;
                int currentPage = Model.Result.CurrentPage;

                int startPage = Math.Max(1, currentPage - 1);
                int endPage = Math.Min(totalPages, currentPage + 1);
                
                for (int i = startPage; i <= endPage; i++)
                {
                    RenderPageButton(i, i == currentPage);
                }

                if (endPage < totalPages - 1)
                {
                    <div class="inline-block">
                        <div class="group min-h-9.5 min-w-9.5 flex justify-center items-center text-gray-400 p-2 text-sm rounded-lg focus:outline-hidden focus:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-neutral-500 dark:focus:bg-white/10">
                            <span class="text-xs">•••</span>
                        </div>
                    </div>
                }

                if (endPage < totalPages)
                {
                    RenderPageButton(totalPages, currentPage == totalPages);
                }
            }
        </div>

        @if (Model.Result.CurrentPage != Model.Result.TotalPages)
        {
            <button type="button" id="toNextPage" class="min-h-9.5 min-w-9.5 py-2 px-2.5 inline-flex jusify-center items-center gap-x-2 text-sm rounded-lg text-gray-800 hover:bg-gray-100 focus:outline-hidden focus:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10" aria-label="Next">
                <span class="sr-only">Next</span>
                <svg class="shrink-0 size-3.5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="m9 18 6-6-6-6"></path>
                </svg>
            </button>
        }
    </nav>
</div>