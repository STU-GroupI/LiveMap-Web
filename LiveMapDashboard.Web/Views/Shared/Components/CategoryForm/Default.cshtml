@using LiveMapDashboard.Web.Models.Modal
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model LiveMapDashboard.Web.Models.Category.CategoryCrudFormViewModel

@{
    Layout = "~/Views/Shared/Layouts/_DefaultLayout.cshtml";
    
    const string leaveChangesModalId = "modal-leave-changes";
    var leaveChangesModalModel = new LeaveChangesModalViewModel
    {
        ModalId = leaveChangesModalId,
        ModalTitle = "Leave changes",
        ModalMessage = "Are you sure you would like to abandon your changes?",
    };

    var deleteModalId = $"delete-poi-{Model.CategoryName?.Replace(' ', '-').ToLower() ?? "modal"}";
    var deleteModalModel = !string.IsNullOrEmpty(Model.CategoryName) ? new DeleteModalViewModel
    {
        ModalId = deleteModalId,
        ModalTitle = $"Delete Category: {Model.CategoryName}",
        WarningMessage = "This action is not reversible, so please continue with caution.",
        DangerMessage = Model.IsUsed == true
            ? "This category is in use by other points of interest. Removing it will update related points of interest to have the default category of 'empty'."
            : null,
        FormController = "Category",
        FormAction = "Delete",
        HiddenInputs = new Dictionary<string, string>
        {
            { "CategoryName", Model.CategoryName },
            { "NewValue", Model.CategoryName },
            { "IconName", Model.IconName }
        }
    } : null;
}


@section TopBarActions
{
    <div class="mb-5 pb-5 flex w-full justify-between items-center border-b border-gray-200 dark:border-neutral-700">
        <div class="flex items-center gap-x-4">
            @if (!string.IsNullOrEmpty(Model.CategoryName))
            {
                <a asp-controller="Category" asp-action="Index" class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-corner-down-left-icon lucide-corner-down-left shrink size-4"><path d="M20 4v7a4 4 0 0 1-4 4H4"/><path d="m9 10-5 5 5 5"/></svg>
                </a>
            }
            else
            {
                <button type="button" class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none" aria-haspopup="dialog" aria-expanded="false" aria-controls="@leaveChangesModalId" data-hs-overlay="#@leaveChangesModalId">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-corner-down-left-icon lucide-corner-down-left shrink size-4"><path d="M20 4v7a4 4 0 0 1-4 4H4"/><path d="m9 10-5 5 5 5"/></svg>
                </button>
            }
            <h2 class="text-2xl font-semibold text-gray-800 dark:text-neutral-200">
                @if (!string.IsNullOrEmpty(Model.CategoryName))
                {
                    <span>Edit Category: @Model.CategoryName</span>
                }
                else
                {
                    <span>Create New Category</span>
                }
            </h2>
        </div>

        @await Html.PartialAsync("~/Views/Shared/Components/CategoryForm/_GoBackModal.cshtml", leaveChangesModalModel)

        <div class="inline-flex gap-x-2">
            @if (Model.CategoryName != "" && Model.CategoryName is not null)
            {
                <div class="text-center">
                    <button type="button" class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-red-600 text-white hover:bg-red-700 focus:outline-hidden focus:bg-red-700 disabled:opacity-50 disabled:pointer-events-none" aria-haspopup="dialog" aria-expanded="false" aria-controls="@deleteModalId" data-hs-overlay="#@deleteModalId">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash2-icon lucide-trash-2 shrink size-4"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/><line x1="10" x2="10" y1="11" y2="17"/><line x1="14" x2="14" y1="11" y2="17"/></svg>
                        Delete
                    </button>
                </div>

                @await Html.PartialAsync("Components/CategoryForm/_DeleteModal", deleteModalModel)
            }
        </div>
    </div>
}

@section Content
{
    <div class="max-w-10xl px-4 pb-10 sm:px-6 lg:px-6 lg:pb-14 mx-auto">
        <form method="post" asp-controller="category" asp-action="submit">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-red-500 mb-4"></div>

            <input type="hidden" name="@nameof(Model.CategoryName)" asp-for="CategoryName" />

            <div class="flex flex-col gap-6">
                <div class="mt-2 p-4 relative z-10 bg-white border border-gray-200 rounded-xl dark:bg-neutral-900 dark:border-neutral-700">

                    @Html.EditorFor(m => m.NewValue, new ViewDataDictionary(ViewData) {
                        { "value", Model.CategoryName },
                        { "Label", "Category name" }
                    })
                </div>
            </div>

            <div class="mt-2 p-4 relative z-10 bg-white border border-gray-200 rounded-xl dark:bg-neutral-900 dark:border-neutral-700">
                <label asp-for="IconName" class="block mb-2 text-sm font-medium">
                    Select icon
                </label>

                @{
                    string value = Model.IconName != "" && Model.IconName is not null
                    ? Model.IconName
                    : "";
                }

                @{
                    string placeholder = Model.IconName != "" && Model.IconName is not null
                    ? Model.IconName
                    : "Search a Material Icon...";
                }

                <input type="text"
                       id="iconSearchInput"
                       class="border px-2 py-2 rounded w-full text-sm"
                       value="@value"
                       placeholder="@placeholder"/>

                @Html.EditorFor(m => m.IconName, new ViewDataDictionary(ViewData)
                {
                    { "value", Model.IconName },
                    { "Label", "Icon name" },
                    { "Hidden", true }
                })

                <div id="iconSearchResults"
                     class="mt-2 max-h-60 overflow-y-auto border border-gray-200 rounded p-2 bg-white dark:bg-neutral-900 shadow-inner text-sm iconList">
                </div>
            </div>

            <div class="mt-2 py-4 relative z-10">
                <div class="flex justify-end gap-3 w-full">

                    @if (Model.CategoryName != "" && Model.CategoryName is not null)
                    {
                        <a asp-controller="Category" asp-action="Index" class="py-3 px-4 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-gray-100 text-gray-800 hover:bg-gray-200 focus:outline-hidden focus:bg-gray-200 disabled:opacity-50 disabled:pointer-events-none dark:bg-white/10 dark:text-white dark:hover:bg-white/20 dark:hover:text-white dark:focus:bg-white/20 dark:focus:text-white">
                            Cancel
                        </a>
                    }
                    else
                    {
                        <div class="py-3 px-4 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-gray-100 text-gray-800 hover:bg-gray-200 focus:outline-hidden focus:bg-gray-200 disabled:opacity-50 disabled:pointer-events-none dark:bg-white/10 dark:text-white dark:hover:bg-white/20 dark:hover:text-white dark:focus:bg-white/20 dark:focus:text-white" data-hs-overlay="#@leaveChangesModalId">
                            Cancel
                        </div>
                    }

                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 text-center">
                        Save
                    </button>
                </div>
            </div>
        </form>
    </div>
}
