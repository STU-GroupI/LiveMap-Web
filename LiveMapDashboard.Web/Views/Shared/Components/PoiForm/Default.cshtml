@using LiveMapDashboard.Web.Models.Modal
@model LiveMapDashboard.Web.Models.Poi.PoiCrudformViewModel

@{
    Layout = "~/Views/Shared/Layouts/_GridDoubleLayout.cshtml";

    const string leaveChangesModalId = "modal-leave-changes";
    var leaveChangesModalModel = new LeaveChangesModalViewModel
    {
        ModalId = leaveChangesModalId,
        ModalTitle = "Leave changes",
        ModalMessage = "Are you sure you would like to abandon your changes?",
    };

    var deleteModalId = $"delete-poi-{Model.Id?.Replace(' ', '-').ToLower() ?? "modal"}";
    var deleteModalModel = !string.IsNullOrEmpty(Model.Id) ? new DeleteModalViewModel
    {
        ModalId = deleteModalId,
        ModalTitle = $"Delete Category: {Model.Title}",
        WarningMessage = "This action is not reversible, so please continue with caution.",
        FormController = "Poi",
        FormAction = "Delete",
        HiddenInputs = new Dictionary<string, string>
        {
            { "Id", Model.Id },
            { "MapId", Model.MapId },
        }
    } : null;
}

@section TopBarActions
{
    @if (!string.IsNullOrEmpty(Model.Id))
    {
        <a asp-controller="Poi" asp-action="Index" class="bg-transparent hover:bg-transparent py-2 text-blue-500 hover:bg-blue-600 flex justify-center items-center cursor-pointer" aria-haspopup="dialog" aria-expanded="false" aria-controls="go-back-alert" data-hs-overlay="#go-back-alert">
            <span class="inline-flex justify-center items-center size-11 rounded-full text-blue-600 dark:text-blue-500">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-left-icon lucide-arrow-left shrink-0 size-5"><path d="m12 19-7-7 7-7"/><path d="M19 12H5"/></svg>
            </span>
            Go back
        </a>
    }
    else
    {
        <button type="button" class="bg-transparent hover:bg-transparent py-2 text-blue-500 hover:bg-blue-600 flex justify-center items-center cursor-pointer" aria-haspopup="dialog" aria-expanded="false" aria-controls="@leaveChangesModalId" data-hs-overlay="#@leaveChangesModalId">
            <span class="inline-flex justify-center items-center size-11 rounded-full text-blue-600 dark:text-blue-500">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-left-icon lucide-arrow-left shrink-0 size-5"><path d="m12 19-7-7 7-7"/><path d="M19 12H5"/></svg>
            </span>
            Go back
        </button>
    }

    @await Html.PartialAsync("~/Views/Shared/Components/PoiForm/_GoBackModal.cshtml", leaveChangesModalModel)

    @if (deleteModalModel != null)
    {
        <div class="text-center">
            <button type="button" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 cursor-pointer" aria-haspopup="dialog" aria-expanded="false" aria-controls="@deleteModalId" data-hs-overlay="#@deleteModalId">
                Delete
            </button>
        </div>

        @await Html.PartialAsync("~/Views/Shared/Components/PoiForm/_DeleteModal.cshtml", deleteModalModel)
    }
}

@section GridLeftContent
{
    <div>
        <div class="card w-full z-10 bg-white border border-gray-200 dark:bg-neutral-900 dark:border-neutral-700 rounded-lg">
            <div class="card-body w-full h-full">
                <div id="map" class="h-[50vh] w-full rounded-lg"></div>
            </div>
        </div>
    </div>
}

@section GridRightContent
{
    <form method="post" asp-controller="poi" asp-action="submit">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-red-500 mb-4"></div>

        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="MapId" />
        <input type="hidden" asp-for="Coordinate.Latitude" />
        <input type="hidden" asp-for="Coordinate.Longitude" />

        <div>
            <div class="mb-6 border border-blue-500 p-4 rounded-lg">
                <div class="flex justify-between items-center">
                    <div>
                        <label class="text-sm font-medium text-gray-700 block mb-1 dark:text-gray-200">Locatie</label>
                        <p class="text-xs text-gray-500 dark:text-gray-400">*Click on the map to add a location</p>
                        <span asp-validation-for="Coordinate" class="text-red-500 mb-4"></span>
                    </div>
                    <button type="button"
                            class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition duration-200"
                            id="applyLocationButton">
                        + Add location
                    </button>
                </div>
            </div>
            
            <div class="mt-1 p-4 relative z-10 bg-white border border-gray-200 rounded-xl sm:mt-4 dark:bg-neutral-900 dark:border-neutral-700">
                @Html.EditorFor(m => m.Title, new ViewDataDictionary(ViewData) {
                    { "Placeholder", "Enter Title..." },
                    { "Label", "Title" }
                })

                @Html.EditorFor(m => m.Category, "Dropdown", new ViewDataDictionary(ViewData) {
                    { "Options", Model.Categories?.Select(c => c.CategoryName) },
                    { "IconNames", Model.Categories?.Select(c => c.IconName) },
                    { "Label", "Category" }
                })
                
                @Html.EditorFor(m => m.Description, new ViewDataDictionary(ViewData) {
                    { "Placeholder", "Enter Description..." },
                    { "Label", "Description" },
                    { "IsMultiline", true }
                })

                @Html.EditorFor(m => m.IsWheelchairAccessible, new ViewDataDictionary(ViewData) {
                    { "Label", "Wheelchair Accessible" }
                })
            </div>

            <div class="mt-1 p-4 relative z-10 bg-white border border-gray-200 rounded-xl sm:mt-4 dark:bg-neutral-900 dark:border-neutral-700">
                @Html.EditorFor(m => m.Image, new ViewDataDictionary(ViewData) {
                { "Label", "Image (URL)" },
                })

                <div class="flex justify-center">
                    <div id="previewImageLoader" class="animate-spin size-6 border-3 border-current border-t-transparent text-blue-600 rounded-full dark:text-blue-500 hidden" role="status" aria-label="loading">
                        <span class="sr-only">Loading...</span>
                    </div>

                    <img id="previewImage" class="mt-2 w-full rounded-lg hidden" alt="POI main image"/>
                    <p id="imagePreviewError" class="text-sm text-yellow-800 mt-2 hidden">Image at URL does not exist.</p>
                </div>
            </div>
            
            <div class="mt-1 p-4 relative z-10 bg-white border border-gray-200 rounded-xl sm:mt-4 dark:bg-neutral-900 dark:border-neutral-700">
                <div>
                    <label class="block mb-2 text-sm font-medium dark:text-white">
                        Opening Hours
                    </label>

                    <div class="space-y-3">
                        @for (int i = 0; i < 7; i++)
                        {
                            var dayName = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetDayName((DayOfWeek)i);
                   
                            <div class="flex items-center gap-4">
                                @Html.EditorFor(m => m.OpeningHours[i].IsActive, new ViewDataDictionary(ViewData) {
                                { "Label", @dayName }
                                })
                                
                                @Html.EditorFor(m => m.OpeningHours[i].Start, "Time", new ViewDataDictionary(ViewData) {
                                { "Label", "" }
                                })
                                <span class="text-sm text-gray-500">to</span>
                                @Html.EditorFor(m => m.OpeningHours[i].End, "Time", new ViewDataDictionary(ViewData) {
                                { "Label", "" }
                                })
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-2 py-4 relative z-10">
            <div class="flex justify-end gap-3 w-full">
                @if (!string.IsNullOrEmpty(Model.Id))
                {
                    <a asp-controller="Poi" asp-action="Index" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                        Cancel
                    </a>
                }
                else
                {
                    <a class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600" aria-haspopup="dialog" aria-expanded="false" aria-controls="@leaveChangesModalId" data-hs-overlay="#@leaveChangesModalId">
                        Cancel
                    </a>
                }

                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                    @(!string.IsNullOrEmpty(Model.Id) ? "Update" : "Create")
                </button>
            </div>
        </div>
    </form>
    <script src="~/js/preview-image.js" asp-append-version="true" type="module"></script>
}