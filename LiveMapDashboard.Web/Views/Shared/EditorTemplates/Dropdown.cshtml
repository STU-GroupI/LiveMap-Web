@model string

@{
    var fieldName = ViewData.ModelMetadata.PropertyName;
    var labelText = ViewData["Label"] as string ?? fieldName;
    var fullFieldName = ViewData.TemplateInfo.GetFullHtmlFieldName("");

    var options = ViewData["Options"] as IEnumerable<string> ?? Enumerable.Empty<string>();
    var iconNames = ViewData["IconNames"] as IEnumerable<string> ?? Enumerable.Empty<string>();

    var optionsList = options.ToList();
    var iconNamesList = iconNames.ToList();

    for (var i = 0; i < optionsList.Count; i++)
    {
        if (i >= iconNamesList.Count || string.IsNullOrEmpty(optionsList[i]))
        {
            iconNamesList.Insert(i, string.Empty);
        }
    }
}
<div class="mb-2">
    @if (!string.IsNullOrEmpty(labelText))
    {
        <label for="@fullFieldName" class="block mb-2 text-sm font-medium dark:text-white">
            @labelText
        </label>
    }

    <select id="@fullFieldName" name="@fullFieldName"
            class="border py-2.5 px-2 block w-full border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600">
        <option value="">-</option>
        @foreach (var (option, iconName) in optionsList.Zip(iconNamesList, (o, i) => (o, i)))
        {
            <option value="@option" selected="@(Model == option ? "selected" : null)" data-iconname="@iconName">
                @option
            </option>
        }
    </select>

    @if (ViewData.ModelState.TryGetValue(fieldName ?? "", out var entry) && entry.Errors.Count > 0)
    {
        <span class="text-sm text-red-600 mt-2">@entry.Errors[0].ErrorMessage</span>
    }
</div>