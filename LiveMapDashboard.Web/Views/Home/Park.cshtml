@* @{ *@
@*     ViewData["Title"] = "Home Page"; *@
@* } *@

@* <div class="text-center"> *@
@*     <h1 class="display-4">Welcome</h1> *@
@*     <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p> *@
@* </div> *@

@{
    ViewData["Title"] = "Home Page";
}
<style>
    .calculation-box {
        height: 75px;
        width: 150px;
        position: absolute;
        bottom: 40px;
        left: 10px;
        background-color: rgba(255, 255, 255, 0.9);
        padding: 15px;
        text-align: center;
    }

    p {
        font-family: 'Open Sans';
        margin: 0;
        font-size: 13px;
    }

    .maplibregl-map {
        height: 50vh;
        width: 100%;
    }
</style>

<script src="https://www.unpkg.com/@@mapbox/mapbox-gl-draw@1.5.0/dist/mapbox-gl-draw.js"></script>
<link rel="stylesheet"
      href="https://www.unpkg.com/@@mapbox/mapbox-gl-draw@1.5.0/dist/mapbox-gl-draw.css" />

<div class="card">
    <div class="card-header">
        ParkNaam
    </div>
    <div class="card-body">
        <div class="card">
            <div id="map"></div>
        </div>

        <div class="pt-3">
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="longitudeInput">Longitude</label>
                        <input type="text" class="form-control" id="longitudeInput" aria-describedby="longitude">
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="latitudeInput">Latitude</label>
                        <input type="text" class="form-control" id="latitudeInput" aria-describedby="latitude">
                    </div>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="button" class="btn btn-primary w-100" id="submitGo">Zoek</button>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="button" class="btn btn-primary w-100" id="searchPark">Naar Park</button>
                </div>
            </div>
        </div>

        <div class="pt-3">
            <a href="#" class="btn btn-primary" id="saveMap">Opslaan</a>
            <a href="#" class="btn btn-danger">Verwijderen</a>
            <a href="#" class="btn btn-primary" id="drawMap">Tekenen</a>
        </div>
    </div>
</div>

<script type="module">
    import * as turf from 'https://esm.sh/@@turf/turf@7.1.0';

    MapboxDraw.constants.classes.CANVAS  = 'maplibregl-canvas';
    MapboxDraw.constants.classes.CONTROL_BASE  = 'maplibregl-ctrl';
    MapboxDraw.constants.classes.CONTROL_PREFIX = 'maplibregl-ctrl-';
    MapboxDraw.constants.classes.CONTROL_GROUP = 'maplibregl-ctrl-group';
    MapboxDraw.constants.classes.ATTRIBUTION = 'maplibregl-ctrl-attrib';

    const map = new maplibregl.Map({
        container: 'map',
        style: 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json',
        center: [4.729, 52.045],
        zoom: 15
    });

    const draw = new MapboxDraw({
        displayControlsDefault: false,
        controls: {
            polygon: false,
            trash: true
        },
        styles: [
            {
                'id': 'gl-draw-polygon-and-line-vertex-active',
                'type': 'circle',
                'filter': ['==', '$type', 'Point'],
                'paint': {
                    'circle-radius': 5,
                    'circle-color': '#fff',
                    'circle-stroke-width': 2,
                    'circle-stroke-color': '#0f0'
                }
            },
            {
                'id': 'gl-draw-polygon-fill',
                'type': 'fill',
                'filter': ['==', '$type', 'Polygon'],
                'paint': {
                    'fill-color': '#0f0',
                    'fill-opacity': 0.4
                }
            },
            {
                'id': 'gl-draw-polygon-stroke',
                'type': 'line',
                'filter': ['==', '$type', 'Polygon'],
                'paint': {
                    'line-color': '#0f0',
                    'line-width': 2,
                    'line-dasharray': ['literal', [2, 2]]
                }
            }
        ]
    });

    map.addControl(draw);

        document.querySelector('#drawMap').addEventListener('click', () => {
        draw.changeMode('draw_polygon');  // Enable drawing polygon mode
    });

    map.on('draw.create', onCreateArea);
    map.on('draw.delete', onDeleteArea);
    map.on('draw.update', updateArea);

    function updateArea(e) {
        const data = draw.getAll();

        if (data.features.length > 0) {
            const area = turf.area(data);

            // restrict to area to 2 decimal points
            const roundedArea = Math.round(area * 100) / 100;
        }

        onAreaChanged();
    }

    function onDeleteArea() {
        fetch("http://localhost:3000/coords", {
            method: "DELETE",
        })
            .then(response => response.json())
            .then(data => {
                console.log("Data deleted:", data);
            })
            .catch(error => {
                console.error("Error:", error);
            });
        onAreaChanged();
    }

    function onCreateArea(e) {
        const data = draw.getAll();

        if (data.features.length > 1) {
            draw.delete(data.features[data.features.length - 1].id);
        }

        onAreaChanged();
    }

    function onAreaChanged() {
             // Select the start drawing button (use the correct selector for your button)
        const startDrawingBtn = document.querySelector('#drawMap');  // Or use a different selector
    
        if (startDrawingBtn) {
            console.log("disablin' time")
        // Disable the start drawing button if there are features drawn
            startDrawingBtn.disabled = (draw.getAll().features.length > 0);
        }
    }

    function getCenterOfCoordinates(coordinates) {
        let totalLatitude = 0;
        let totalLongitude = 0;

        // Loop through each coordinate and sum up latitudes and longitudes
        coordinates.forEach(coord => {
            totalLatitude += coord[1];
            totalLongitude += coord[0];
        });

        // Calculate the average latitude and longitude
        const centerLatitude = totalLatitude / coordinates.length;
        const centerLongitude = totalLongitude / coordinates.length;

        return [centerLongitude, centerLatitude];  // Return in [longitude, latitude] format
    }

    document.addEventListener('DOMContentLoaded', () => {
        {
            document.querySelector('#latitudeInput').value = '51.6885178';
            document.querySelector('#longitudeInput').value = '5.2866805';

            fetch("http://localhost:3000/coords", {
                method: "GET",
            })
                .then(response => response.json())
                .then(data => {
                    const newFeature = draw.add({
                        type: 'Feature',
                        properties: [],
                        geometry: {
                            type: 'Polygon',
                            coordinates: data.coordinates
                        }
                    });
                    onAreaChanged();
                })
                .catch(error => {
                    console.error("Error:", error);
                });
        }

        document.querySelector('#saveMap').addEventListener('click', () => {
            const features = draw.getAll().features;
            if (features.length == 0) {
                return;
            }

            // Save Map
            console.log(features[0]);
            const coordinates = features[0].geometry.coordinates;

            fetch("http://localhost:3000/coords", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(coordinates)
            })
                .then(response => response.json())
                .then(data => console.log("Success: ", data))
                .catch(error => console.error("Error: ", error));
        });

        document.querySelector('#submitGo').addEventListener('click', () => {
            console.log(map.getCenter());
            try {
                map.setCenter([
                document.querySelector('#longitudeInput').value,
                document.querySelector('#latitudeInput').value
            ]);
            } catch (error) {
                // show alert or something
                console.log(error);
            }
        });

        document.querySelector('#searchPark').addEventListener('click', () => {
            const features = draw.getAll().features;
            if (features.length == 0) {
                console.log('er is nog geen park');
                return;
            }

            // Save Map
            const coordinates = features[0].geometry.coordinates[0];
            map.setCenter(getCenterOfCoordinates(coordinates));
        });
    });
</script>