@* @{ *@
@*     ViewData["Title"] = "Home Page"; *@
@* } *@

@* <div class="text-center"> *@
@*     <h1 class="display-4">Welcome</h1> *@
@*     <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p> *@
@* </div> *@

@{
    ViewData["Title"] = "Home Page";
}
<style>
    .calculation-box {
        height: 75px;
        width: 150px;
        position: absolute;
        bottom: 40px;
        left: 10px;
        background-color: rgba(255, 255, 255, 0.9);
        padding: 15px;
        text-align: center;
    }

    p {
        font-family: 'Open Sans';
        margin: 0;
        font-size: 13px;
    }

    .maplibregl-map {
        height: 50vh;
        width: 100%;
    }
</style>

<script src="https://www.unpkg.com/@@mapbox/mapbox-gl-draw@1.5.0/dist/mapbox-gl-draw.js"></script>
<link rel="stylesheet"
      href="https://www.unpkg.com/@@mapbox/mapbox-gl-draw@1.5.0/dist/mapbox-gl-draw.css" />

<div id="map"></div>

<button id="saveMap">
    Hello
</button>

<script type="module">
    import * as turf from 'https://esm.sh/@@turf/turf@7.1.0';

    MapboxDraw.constants.classes.CANVAS  = 'maplibregl-canvas';
    MapboxDraw.constants.classes.CONTROL_BASE  = 'maplibregl-ctrl';
    MapboxDraw.constants.classes.CONTROL_PREFIX = 'maplibregl-ctrl-';
    MapboxDraw.constants.classes.CONTROL_GROUP = 'maplibregl-ctrl-group';
    MapboxDraw.constants.classes.ATTRIBUTION = 'maplibregl-ctrl-attrib';

    const map = new maplibregl.Map({
        container: 'map',
        style: 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json',
        center: [-91.874, 42.76],
        zoom: 12
    });

    const draw = new MapboxDraw({
        displayControlsDefault: false,
        controls: {
            polygon: true,
            trash: true
        },
        styles: [
            {
                'id': 'gl-draw-polygon-and-line-vertex-active',
                'type': 'circle',
                'filter': ['==', '$type', 'Point'],
                'paint': {
                    'circle-radius': 5,
                    'circle-color': '#fff',
                    'circle-stroke-width': 2,
                    'circle-stroke-color': '#0f0'
                }
            },
            {
                'id': 'gl-draw-polygon-fill',
                'type': 'fill',
                'filter': ['==', '$type', 'Polygon'],
                'paint': {
                    'fill-color': '#0f0',
                    'fill-opacity': 0.4
                }
            },
            {
                'id': 'gl-draw-polygon-stroke',
                'type': 'line',
                'filter': ['==', '$type', 'Polygon'],
                'paint': {
                    'line-color': '#0f0',
                    'line-width': 2,
                    'line-dasharray': ['literal', [2, 2]]
                }
            }
        ]
    });

    map.addControl(draw);

    map.on('draw.create', onCreateArea);
    map.on('draw.delete', onDeleteArea);
    map.on('draw.update', updateArea);

    function updateArea(e) {
        const data = draw.getAll();

        if (data.features.length > 0) {
            const area = turf.area(data);

            // restrict to area to 2 decimal points
            const roundedArea = Math.round(area * 100) / 100;
        }

        onAreaChanged();
    }

    function onDeleteArea() {
        fetch("http://localhost:3000/coords", {
            method: "DELETE",
        })
        .then(response => response.json())
        .then(data => {
            console.log("Data deleted:", data);
        })
        .catch(error => {
            console.error("Error:", error);
        });
    }

    function onCreateArea(e) {
        const data = draw.getAll();

        if (data.features.length > 1) {
            draw.delete(data.features[data.features.length - 1].id);
        }

        onAreaChanged();
    }

    function onAreaChanged() {
        document.querySelector('.mapbox-gl-draw_ctrl-draw-btn.mapbox-gl-draw_polygon').disabled
            = (draw.getAll().features.length > 0);
    }

    document.addEventListener('DOMContentLoaded', () => {
        {
            fetch("http://localhost:3000/coords", {
                method: "GET",
            })
            .then(response => response.json())
            .then(data => {
                const newFeature = draw.add({
                    type: 'Feature',
                    properties: [],
                    geometry: {
                        type: 'Polygon',
                        coordinates: data.coordinates
                    }
                });
                onAreaChanged();
            })
            .catch(error => {
                console.error("Error:", error);
            });
        }

        document.querySelector('#saveMap').addEventListener('click', () => {
            const features = draw.getAll().features;
            if (features.length == 0) {
                return;
            }

            // Save Map
            console.log(features[0]);
            const coordinates = features[0].geometry.coordinates;

            fetch("http://localhost:3000/coords", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(coordinates)
            })
            .then(response => response.json())
            .then(data => console.log("Success: ", data))
            .catch(error => console.error("Error: ", error));
        });
    });
</script>